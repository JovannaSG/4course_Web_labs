Необходимо реализовать авторизацию в вашем REST Api из прошлой лабы
Сперва прочитать и изучить https://habr.com/ru/articles/533868/

1. Реализовать класс KeycloakJwtBearerHandler, наследуемый от JwtBearerHandler(или подобной реализации в вашем стеке),
который будет предоставлять логику для обработки и проверки JWT токена,
получаемого из Keycloak, по одному из запросов в прошлой лабе
Конструктор класса должен несколько параметров, таких как httpClient, memoryCache, appConfig, logger и tokenHelper,
которые используются для выполнения различных операций, связанных с аутентификацией.
Необходимо, чтобы в KeycloakJwtBearerHandler была реализована следующая логика:
- Проверка наличия заголовка Authorization в запросе. Если его нет, возвращает ошибку.
- Извлечение значения токена из заголовка. Если оно пустое, не начинается с "Bearer " или слишком короткое,
возвращает ошибку.
- Генерация ключа для кэширования токена, используя вторую часть токена (payload),
которая содержит информацию о пользователе и сроке действия токена.
- Получение списка прав (claims) из кэша по ключу. Если он пустой, значит токен еще не проверен или устарел.
- Добавление заголовка Authorization с токеном к httpClient и отправка POST-запрос к серверу Keycloak,
чтобы получить подробную информацию о пользователе (userinfo). Если запрос не успешен, возвращает ошибку.
- Разбирать токен получать список прав из него. Если список прав пустой, возвращает ошибку.
И т.д. :)
В итоге, после реализации должна быть следующая ситуация:
Вы отправляете запрос с postman или insomnia на сервер с keycloak, по данным юзера получаете JWT-токен,
вставляете его в поле Auth в Swagger или аналогичном инструменте.
После реализации, запросы с заголовком POST, PUT, UPDATE могут отправляться только от авторезированного пользователя
с указанной ролью, для этого необходимо добавить соответстующий декоратор, атрибут или аналог в вашем языке,
в котором также, будет указана роль пользователя 

2. Воспользуйтес инструментами статического(SAST) анализа кода(взять минимум 2),
например https://pvs-studio.ru/ru/pvs-studio/,
проанализируйте проект на ошибки, исправьте критические и приложите скриншоты ДО и ПОСЛЕ.